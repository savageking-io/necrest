// Package rest provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package rest

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for PlatformType.
const (
	Apple     PlatformType = "apple"
	Battlenet PlatformType = "battlenet"
	Discord   PlatformType = "discord"
	Epic      PlatformType = "epic"
	Generic   PlatformType = "generic"
	Gog       PlatformType = "gog"
	Google    PlatformType = "google"
	Nintendo  PlatformType = "nintendo"
	Origin    PlatformType = "origin"
	Psn       PlatformType = "psn"
	Rockstar  PlatformType = "rockstar"
	Steam     PlatformType = "steam"
	Twitch    PlatformType = "twitch"
	Uplay     PlatformType = "uplay"
	Xbox      PlatformType = "xbox"
)

// Defines values for StoreScope.
const (
	Character StoreScope = "character"
	Player    StoreScope = "player"
)

// NewStore defines model for new_store.
type NewStore struct {
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
	Public      *bool   `json:"public,omitempty"`
}

// PlatformType defines model for platform_type.
type PlatformType string

// Store defines model for store.
type Store struct {
	Code        *int          `json:"code,omitempty"`
	Description *string       `json:"description,omitempty"`
	Id          *string       `json:"id,omitempty"`
	LastUpdate  *time.Time    `json:"last_update,omitempty"`
	Name        *string       `json:"name,omitempty"`
	Platform    *PlatformType `json:"platform,omitempty"`
	Public      *bool         `json:"public,omitempty"`
	ReleaseDate *time.Time    `json:"release_date,omitempty"`
	Scope       *StoreScope   `json:"scope,omitempty"`
	Size        *int          `json:"size,omitempty"`
}

// StoreScope defines model for Store.Scope.
type StoreScope string

// StoreContent defines model for store_content.
type StoreContent struct {
	Content *[]StoreItem `json:"content,omitempty"`
	Page    *int         `json:"page,omitempty"`
	Store   *Store       `json:"store,omitempty"`
	Total   *int         `json:"total,omitempty"`
}

// StoreItem defines model for store_item.
type StoreItem struct {
	// Description Description of an item (default localization)
	Description *string    `json:"description,omitempty"`
	LastUpdate  *time.Time `json:"last_update,omitempty"`

	// Name Item name (default localization)
	Name        *string    `json:"name,omitempty"`
	ReleaseDate *time.Time `json:"release_date,omitempty"`
	Size        *int       `json:"size,omitempty"`

	// Sku Unique identifier for the item
	Sku *string `json:"sku,omitempty"`
}

// StoreList defines model for store_list.
type StoreList struct {
	Stores *[]Store `json:"stores,omitempty"`
}

// LimitParam defines model for limit_param.
type LimitParam = int

// OffsetParam defines model for offset_param.
type OffsetParam = int

// Forbidden defines model for forbidden.
type Forbidden struct {
	Code  *int    `json:"code,omitempty"`
	Error *string `json:"error,omitempty"`
}

// Unauthorized defines model for unauthorized.
type Unauthorized struct {
	Code  *int    `json:"code,omitempty"`
	Error *string `json:"error,omitempty"`
}

// PostAuthJSONBody defines parameters for PostAuth.
type PostAuthJSONBody struct {
	Password *string `json:"password,omitempty"`
	Username *string `json:"username,omitempty"`
}

// GetStoreStoreIdParams defines parameters for GetStoreStoreId.
type GetStoreStoreIdParams struct {
	// Offset Number of items to skip
	Offset *OffsetParam `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit Number of items to return
	Limit *LimitParam `form:"limit,omitempty" json:"limit,omitempty"`
}

// PostAuthJSONRequestBody defines body for PostAuth for application/json ContentType.
type PostAuthJSONRequestBody PostAuthJSONBody

// PutStoreJSONRequestBody defines body for PutStore for application/json ContentType.
type PutStoreJSONRequestBody = NewStore

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Authenticate a user
	// (POST /auth)
	PostAuth(w http.ResponseWriter, r *http.Request)
	// Get the status of the API
	// (GET /status)
	GetStatus(w http.ResponseWriter, r *http.Request)
	// Get all public stores
	// (GET /store)
	GetStore(w http.ResponseWriter, r *http.Request)
	// Create a new store
	// (PUT /store)
	PutStore(w http.ResponseWriter, r *http.Request)
	// Get a store by ID
	// (GET /store/{store_id})
	GetStoreStoreId(w http.ResponseWriter, r *http.Request, storeId string, params GetStoreStoreIdParams)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Authenticate a user
// (POST /auth)
func (_ Unimplemented) PostAuth(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get the status of the API
// (GET /status)
func (_ Unimplemented) GetStatus(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get all public stores
// (GET /store)
func (_ Unimplemented) GetStore(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new store
// (PUT /store)
func (_ Unimplemented) PutStore(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get a store by ID
// (GET /store/{store_id})
func (_ Unimplemented) GetStoreStoreId(w http.ResponseWriter, r *http.Request, storeId string, params GetStoreStoreIdParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// PostAuth operation middleware
func (siw *ServerInterfaceWrapper) PostAuth(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAuth(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetStatus operation middleware
func (siw *ServerInterfaceWrapper) GetStatus(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetStatus(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetStore operation middleware
func (siw *ServerInterfaceWrapper) GetStore(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetStore(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PutStore operation middleware
func (siw *ServerInterfaceWrapper) PutStore(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutStore(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetStoreStoreId operation middleware
func (siw *ServerInterfaceWrapper) GetStoreStoreId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "store_id" -------------
	var storeId string

	err = runtime.BindStyledParameterWithOptions("simple", "store_id", chi.URLParam(r, "store_id"), &storeId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "store_id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetStoreStoreIdParams

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetStoreStoreId(w, r, storeId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth", wrapper.PostAuth)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/status", wrapper.GetStatus)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/store", wrapper.GetStore)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/store", wrapper.PutStore)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/store/{store_id}", wrapper.GetStoreStoreId)
	})

	return r
}

type ForbiddenJSONResponse struct {
	Code  *int    `json:"code,omitempty"`
	Error *string `json:"error,omitempty"`
}

type UnauthorizedJSONResponse struct {
	Code  *int    `json:"code,omitempty"`
	Error *string `json:"error,omitempty"`
}

type PostAuthRequestObject struct {
	Body *PostAuthJSONRequestBody
}

type PostAuthResponseObject interface {
	VisitPostAuthResponse(w http.ResponseWriter) error
}

type PostAuth200JSONResponse struct {
	Token *string `json:"token,omitempty"`
}

func (response PostAuth200JSONResponse) VisitPostAuthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetStatusRequestObject struct {
}

type GetStatusResponseObject interface {
	VisitGetStatusResponse(w http.ResponseWriter) error
}

type GetStatus200JSONResponse struct {
	Status *string `json:"status,omitempty"`
}

func (response GetStatus200JSONResponse) VisitGetStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetStoreRequestObject struct {
}

type GetStoreResponseObject interface {
	VisitGetStoreResponse(w http.ResponseWriter) error
}

type GetStore200JSONResponse StoreList

func (response GetStore200JSONResponse) VisitGetStoreResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetStore401JSONResponse struct{ UnauthorizedJSONResponse }

func (response GetStore401JSONResponse) VisitGetStoreResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetStore403JSONResponse struct{ ForbiddenJSONResponse }

func (response GetStore403JSONResponse) VisitGetStoreResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PutStoreRequestObject struct {
	Body *PutStoreJSONRequestBody
}

type PutStoreResponseObject interface {
	VisitPutStoreResponse(w http.ResponseWriter) error
}

type PutStore201JSONResponse Store

func (response PutStore201JSONResponse) VisitPutStoreResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PutStore400JSONResponse struct {
	Code  *int    `json:"code,omitempty"`
	Error *string `json:"error,omitempty"`
}

func (response PutStore400JSONResponse) VisitPutStoreResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PutStore401JSONResponse struct{ UnauthorizedJSONResponse }

func (response PutStore401JSONResponse) VisitPutStoreResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PutStore403JSONResponse struct{ ForbiddenJSONResponse }

func (response PutStore403JSONResponse) VisitPutStoreResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetStoreStoreIdRequestObject struct {
	StoreId string `json:"store_id"`
	Params  GetStoreStoreIdParams
}

type GetStoreStoreIdResponseObject interface {
	VisitGetStoreStoreIdResponse(w http.ResponseWriter) error
}

type GetStoreStoreId200JSONResponse StoreContent

func (response GetStoreStoreId200JSONResponse) VisitGetStoreStoreIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetStoreStoreId404JSONResponse struct {
	Code  *int    `json:"code,omitempty"`
	Error *string `json:"error,omitempty"`
}

func (response GetStoreStoreId404JSONResponse) VisitGetStoreStoreIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Authenticate a user
	// (POST /auth)
	PostAuth(ctx context.Context, request PostAuthRequestObject) (PostAuthResponseObject, error)
	// Get the status of the API
	// (GET /status)
	GetStatus(ctx context.Context, request GetStatusRequestObject) (GetStatusResponseObject, error)
	// Get all public stores
	// (GET /store)
	GetStore(ctx context.Context, request GetStoreRequestObject) (GetStoreResponseObject, error)
	// Create a new store
	// (PUT /store)
	PutStore(ctx context.Context, request PutStoreRequestObject) (PutStoreResponseObject, error)
	// Get a store by ID
	// (GET /store/{store_id})
	GetStoreStoreId(ctx context.Context, request GetStoreStoreIdRequestObject) (GetStoreStoreIdResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// PostAuth operation middleware
func (sh *strictHandler) PostAuth(w http.ResponseWriter, r *http.Request) {
	var request PostAuthRequestObject

	var body PostAuthJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostAuth(ctx, request.(PostAuthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAuth")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostAuthResponseObject); ok {
		if err := validResponse.VisitPostAuthResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetStatus operation middleware
func (sh *strictHandler) GetStatus(w http.ResponseWriter, r *http.Request) {
	var request GetStatusRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetStatus(ctx, request.(GetStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetStatus")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetStatusResponseObject); ok {
		if err := validResponse.VisitGetStatusResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetStore operation middleware
func (sh *strictHandler) GetStore(w http.ResponseWriter, r *http.Request) {
	var request GetStoreRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetStore(ctx, request.(GetStoreRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetStore")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetStoreResponseObject); ok {
		if err := validResponse.VisitGetStoreResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutStore operation middleware
func (sh *strictHandler) PutStore(w http.ResponseWriter, r *http.Request) {
	var request PutStoreRequestObject

	var body PutStoreJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PutStore(ctx, request.(PutStoreRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutStore")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PutStoreResponseObject); ok {
		if err := validResponse.VisitPutStoreResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetStoreStoreId operation middleware
func (sh *strictHandler) GetStoreStoreId(w http.ResponseWriter, r *http.Request, storeId string, params GetStoreStoreIdParams) {
	var request GetStoreStoreIdRequestObject

	request.StoreId = storeId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetStoreStoreId(ctx, request.(GetStoreStoreIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetStoreStoreId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetStoreStoreIdResponseObject); ok {
		if err := validResponse.VisitGetStoreStoreIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
